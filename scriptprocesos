CREATE TABLE Platforms (
    Platform_ID INT AUTO_INCREMENT PRIMARY KEY,
    Platform_Name VARCHAR(255) NOT NULL,
    Platform_URL VARCHAR(255) NOT NULL,
    Platform_Type VARCHAR(100),
    Status VARCHAR(20) NOT NULL  
);

-- Tabla de lecciones de usuarios
CREATE TABLE Lesson_Users (
    Lesson_User_ID INT AUTO_INCREMENT PRIMARY KEY,
    User_ID INT NOT NULL,
    Lesson_ID INT NOT NULL,
    Completion_Status VARCHAR(50),
    Completion_Date DATE,
    Progress_Percentage DECIMAL(5, 2),
    Status VARCHAR(20) NOT NULL,
    FOREIGN KEY (User_ID) REFERENCES Users(User_ID),
    FOREIGN KEY (Lesson_ID) REFERENCES Lessons(Lesson_ID)
);

DROP TABLE IF EXISTS Sections;
CREATE TABLE Sections (
    Section_ID INT AUTO_INCREMENT PRIMARY KEY,
    Lesson_ID INT NOT NULL,
    Section_Title VARCHAR(100) NOT NULL,
    Section_Description TEXT,
    Duration INT,
    Order_Num INT,
    Content_Type VARCHAR(50),
    Status VARCHAR(20) DEFAULT 'Activo',
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Updated_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (Lesson_ID) REFERENCES Lessons(Lesson_ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Registros de secciones
-- ----------------------------
BEGIN;
COMMIT;
-- Insertar una sección
DELIMITER //
CREATE PROCEDURE InsertSection(
    IN p_lesson_id INT,
    IN p_section_title VARCHAR(100),
    IN p_section_description TEXT,
    IN p_duration INT,
    IN p_order_num INT,
    IN p_content_type VARCHAR(50)
)
BEGIN
    INSERT INTO Sections (Lesson_ID, Section_Title, Section_Description, Duration, Order_Num, Content_Type, Status)
    VALUES (p_lesson_id, p_section_title, p_section_description, p_duration, p_order_num, p_content_type, 'Activo');
END //
DELIMITER ;

-- Actualizar una sección por ID
DELIMITER //
CREATE PROCEDURE UpdateSectionByID(
    IN p_section_id INT,
    IN p_section_title VARCHAR(100),
    IN p_section_description TEXT,
    IN p_duration INT,
    IN p_order_num INT,
    IN p_content_type VARCHAR(50)
)
BEGIN
    UPDATE Sections
    SET Section_Title = p_section_title,
        Section_Description = p_section_description,
        Duration = p_duration,
        Order_Num = p_order_num,
        Content_Type = p_content_type,
        Updated_At = CURRENT_TIMESTAMP
    WHERE Section_ID = p_section_id AND Status = 'Activo';
END //
DELIMITER ;

-- Obtener todas las secciones activas
DELIMITER //
CREATE PROCEDURE GetAllSections()
BEGIN
    SELECT *
    FROM Sections
    WHERE Status = 'Activo';
END //
DELIMITER ;

-- Obtener sección por ID
DELIMITER //
CREATE PROCEDURE GetSectionByID(IN p_section_id INT)
BEGIN
    SELECT *
    FROM Sections
    WHERE Section_ID = p_section_id AND Status = 'Activo';
END //
DELIMITER ;

-- Eliminar sección por ID (lógica de eliminación)
DELIMITER //
CREATE PROCEDURE DeleteSectionByID(IN p_section_id INT)
BEGIN
    UPDATE Sections
    SET Status = 'Inactivo'
    WHERE Section_ID = p_section_id;
END //
DELIMITER ;




DROP TABLE IF EXISTS Profiles;

CREATE TABLE Profiles (
    Profile_ID INT AUTO_INCREMENT PRIMARY KEY,
    User_ID INT NOT NULL,
    Profile_Name VARCHAR(100) NOT NULL,
    Profile_Description TEXT,
    Age INT,
    Rank INT,
    Profile_Type VARCHAR(50),
    Status VARCHAR(20) DEFAULT 'Activo',
    Created_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Updated_At TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (User_ID) REFERENCES Users(User_ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Insertar un perfil
DELIMITER //
CREATE PROCEDURE InsertProfile(
    IN p_user_id INT,
    IN p_profile_name VARCHAR(100),
    IN p_profile_description TEXT,
    IN p_age INT,
    IN p_rank INT,
    IN p_profile_type VARCHAR(50)
)
BEGIN
    INSERT INTO Profiles (User_ID, Profile_Name, Profile_Description, Age, Rank, Profile_Type, Status)
    VALUES (p_user_id, p_profile_name, p_profile_description, p_age, p_rank, p_profile_type, 'Activo');
END //
DELIMITER ;

-- Actualizar un perfil por ID
DELIMITER //
CREATE PROCEDURE UpdateProfileByID(
    IN p_profile_id INT,
    IN p_profile_name VARCHAR(100),
    IN p_profile_description TEXT,
    IN p_age INT,
    IN p_rank INT,
    IN p_profile_type VARCHAR(50)
)
BEGIN
    UPDATE Profiles
    SET Profile_Name = p_profile_name,
        Profile_Description = p_profile_description,
        Age = p_age,
        Rank = p_rank,
        Profile_Type = p_profile_type,
        Updated_At = CURRENT_TIMESTAMP
    WHERE Profile_ID = p_profile_id AND Status = 'Activo';
END //
DELIMITER ;

-- Obtener todos los perfiles activos
DELIMITER //
CREATE PROCEDURE GetAllProfiles()
BEGIN
    SELECT *
    FROM Profiles
    WHERE Status = 'Activo';
END //
DELIMITER ;

-- Obtener perfil por ID
DELIMITER //
CREATE PROCEDURE GetProfileByID(IN p_profile_id INT)
BEGIN
    SELECT *
    FROM Profiles
    WHERE Profile_ID = p_profile_id AND Status = 'Activo';
END //
DELIMITER ;

-- Eliminar perfil por ID (lógica de eliminación)
DELIMITER //
CREATE PROCEDURE DeleteProfileByID(IN p_profile_id INT)
BEGIN
    UPDATE Profiles
    SET Status = 'Inactivo'
    WHERE Profile_ID = p_profile_id;
END //
DELIMITER ;
