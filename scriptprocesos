-- TABLE COURSES
DROP TABLE IF EXISTS `courses`;
CREATE TABLE `courses` (
  `id_course` int NOT NULL AUTO_INCREMENT,
  `title_course` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `subtitle_course` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `description_course` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `status_course` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  `level_id` int DEFAULT NULL,
  `category_id` int DEFAULT NULL,
  `price_id` int DEFAULT NULL,
  PRIMARY KEY (`id_course`),
  KEY `level_id` (`level_id`),
  KEY `user_id` (`user_id`),
  KEY `category_id` (`category_id`),
  KEY `price_id` (`price_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
BEGIN;
COMMIT;

-- PROCEDURE COURSES
-- PROCEDURE TABLE COURSES
-- InsertCourse
DELIMITER //
DROP PROCEDURE IF EXISTS InsertCourse;
CREATE PROCEDURE InsertCourse(
    IN p_title_course VARCHAR(45),
    IN p_subtitle_course VARCHAR(45),
    IN p_description_course VARCHAR(45),
    IN p_status_course INT,
    IN p_user_id INT,
    IN p_level_id INT,
    IN p_category_id INT,
    IN p_price_id INT
)
BEGIN
    INSERT INTO courses (title_course, subtitle_course, description_course, status_course, user_id, level_id, category_id, price_id)
    VALUES (p_title_course, p_subtitle_course, p_description_course, p_status_course, p_user_id, p_level_id, p_category_id, p_price_id);
END //
DELIMITER ;

-- UpdateCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS UpdateCourseById;
CREATE PROCEDURE UpdateCourseById(
    IN p_id_course INT,
    IN p_title_course VARCHAR(45),
    IN p_subtitle_course VARCHAR(45),
    IN p_description_course VARCHAR(45),
    IN p_status_course INT,
    IN p_user_id INT,
    IN p_level_id INT,
    IN p_category_id INT,
    IN p_price_id INT
)
BEGIN
    UPDATE courses
    SET title_course = p_title_course,
        subtitle_course = p_subtitle_course,
        description_course = p_description_course,
        status_course = p_status_course,
        user_id = p_user_id,
        level_id = p_level_id,
        category_id = p_category_id,
        price_id = p_price_id
    WHERE id_course = p_id_course;
END //
DELIMITER ;

-- GetAllCourses
DELIMITER //
DROP PROCEDURE IF EXISTS GetAllCourses;
CREATE PROCEDURE GetAllCourses()
BEGIN
    SELECT id_course, title_course, subtitle_course, description_course, status_course, user_id, level_id, category_id, price_id
    FROM courses;
END //
DELIMITER ;

-- GetCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS GetCourseById;
CREATE PROCEDURE GetCourseById(IN p_id_course INT)
BEGIN
    SELECT id_course, title_course, subtitle_course, description_course, status_course, user_id, level_id, category_id, price_id
    FROM courses
    WHERE id_course = p_id_course;
END //
DELIMITER ;

-- DeleteCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS DeleteCourseById;
CREATE PROCEDURE DeleteCourseById(IN p_id_course INT)
BEGIN
    UPDATE courses
    SET status_course = 0  -- Considerando 0 como inactivo
    WHERE id_course = p_id_course;
END //
DELIMITER ;




-- TABLE GOALS
DROP TABLE IF EXISTS `goals`;
CREATE TABLE `goals` (
  `id_goal` int NOT NULL AUTO_INCREMENT,
  `name_goal` varchar(34) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `course_id` int NOT NULL,
  PRIMARY KEY (`id_goal`),
  KEY `course_id` (`course_id`),
  CONSTRAINT `goals_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id_course`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
BEGIN;
COMMIT;

-- PROCEDURE TABLE GOALS
-- InsertGoal
DELIMITER //
DROP PROCEDURE IF EXISTS InsertGoal;
CREATE PROCEDURE InsertGoal(
    IN p_name_goal VARCHAR(34),
    IN p_course_id INT
)
BEGIN
    INSERT INTO goals (name_goal, course_id)
    VALUES (p_name_goal, p_course_id);
END //
DELIMITER ;

-- UpdateGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS UpdateGoalById;
CREATE PROCEDURE UpdateGoalById(
    IN p_id_goal INT,
    IN p_name_goal VARCHAR(34),
    IN p_course_id INT
)
BEGIN
    UPDATE goals
    SET name_goal = p_name_goal,
        course_id = p_course_id
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;

-- GetAllGoals
DELIMITER //
DROP PROCEDURE IF EXISTS GetAllGoals;
CREATE PROCEDURE GetAllGoals()
BEGIN
    SELECT id_goal, name_goal, course_id
    FROM goals;
END //
DELIMITER ;

-- GetGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS GetGoalById;
CREATE PROCEDURE GetGoalById(IN p_id_goal INT)
BEGIN
    SELECT id_goal, name_goal, course_id
    FROM goals
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;

-- DeleteGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS DeleteGoalById;
CREATE PROCEDURE DeleteGoalById(IN p_id_goal INT)
BEGIN
    DELETE FROM goals
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;
