-- TABLE COURSES
DROP TABLE IF EXISTS `courses`;
CREATE TABLE `courses` (
  `id_course` int NOT NULL AUTO_INCREMENT,
  `course_title` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `course_subtitle` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `course_description` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `course_status` int DEFAULT NULL,
  `id_user` int DEFAULT NULL,
  `id_level` int DEFAULT NULL,
  `id_category` int DEFAULT NULL,
  `id_price` int DEFAULT NULL,
  PRIMARY KEY (`id_course`),
  KEY `id_level` (`id_level`),
  KEY `id_user` (`id_user`),
  KEY `id_category` (`id_category`),
  KEY `id_price` (`id_price`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
BEGIN;
COMMIT;

-- PROCEDURE COURSES
-- InsertCourse
DELIMITER //
DROP PROCEDURE IF EXISTS InsertCourse;
CREATE PROCEDURE InsertCourse(
    IN p_course_title VARCHAR(45),
    IN p_course_subtitle VARCHAR(45),
    IN p_course_description VARCHAR(45),
    IN p_course_status INT,
    IN p_id_user INT,
    IN p_id_level INT,
    IN p_id_category INT,
    IN p_id_price INT
)
BEGIN
    INSERT INTO courses (course_title, course_subtitle, course_description, course_status, id_user, id_level, id_category, id_price)
    VALUES (p_course_title, p_course_subtitle, p_course_description, p_course_status, p_id_user, p_id_level, p_id_category, p_id_price);
END //
DELIMITER ;

-- UpdateCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS UpdateCourseById;
CREATE PROCEDURE UpdateCourseById(
    IN p_id_course INT,
    IN p_course_title VARCHAR(45),
    IN p_course_subtitle VARCHAR(45),
    IN p_course_description VARCHAR(45),
    IN p_course_status INT,
    IN p_id_user INT,
    IN p_id_level INT,
    IN p_id_category INT,
    IN p_id_price INT
)
BEGIN
    UPDATE courses
    SET course_title = p_course_title,
        course_subtitle = p_course_subtitle,
        course_description = p_course_description,
        course_status = p_course_status,
        id_user = p_id_user,
        id_level = p_id_level,
        id_category = p_id_category,
        id_price = p_id_price
    WHERE id_course = p_id_course;
END //
DELIMITER ;

-- GetAllCourses
DELIMITER //
DROP PROCEDURE IF EXISTS GetAllCourses;
CREATE PROCEDURE GetAllCourses()
BEGIN
    SELECT id_course, course_title, course_subtitle, course_description, course_status, id_user, id_level, id_category, id_price
    FROM courses;
END //
DELIMITER ;

-- GetCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS GetCourseById;
CREATE PROCEDURE GetCourseById(IN p_id_course INT)
BEGIN
    SELECT id_course, course_title, course_subtitle, course_description, course_status, id_user, id_level, id_category, id_price
    FROM courses
    WHERE id_course = p_id_course;
END //
DELIMITER ;

-- DeleteCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS DeleteCourseById;
CREATE PROCEDURE DeleteCourseById(IN p_id_course INT)
BEGIN
    UPDATE courses
    SET course_status = 0  -- Considerando 0 como inactivo
    WHERE id_course = p_id_course;
END //
DELIMITER ;

-- TABLE GOALS
DROP TABLE IF EXISTS `goals`;
CREATE TABLE `goals` (
  `id_goal` int NOT NULL AUTO_INCREMENT,
  `goal_name` varchar(34) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `id_course` int NOT NULL,
  PRIMARY KEY (`id_goal`),
  KEY `id_course` (`id_course`),
  CONSTRAINT `goals_ibfk_1` FOREIGN KEY (`id_course`) REFERENCES `courses` (`id_course`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
BEGIN;
COMMIT;

-- PROCEDURE TABLE GOALS
-- InsertGoal
DELIMITER //
DROP PROCEDURE IF EXISTS InsertGoal;
CREATE PROCEDURE InsertGoal(
    IN p_goal_name VARCHAR(34),
    IN p_id_course INT
)
BEGIN
    INSERT INTO goals (goal_name, id_course)
    VALUES (p_goal_name, p_id_course);
END //
DELIMITER ;

-- UpdateGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS UpdateGoalById;
CREATE PROCEDURE UpdateGoalById(
    IN p_id_goal INT,
    IN p_goal_name VARCHAR(34),
    IN p_id_course INT
)
BEGIN
    UPDATE goals
    SET goal_name = p_goal_name,
        id_course = p_id_course
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;

-- GetAllGoals
DELIMITER //
DROP PROCEDURE IF EXISTS GetAllGoals;
CREATE PROCEDURE GetAllGoals()
BEGIN
    SELECT id_goal, goal_name, id_course
    FROM goals;
END //
DELIMITER ;

-- GetGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS GetGoalById;
CREATE PROCEDURE GetGoalById(IN p_id_goal INT)
BEGIN
    SELECT id_goal, goal_name, id_course
    FROM goals
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;

-- DeleteGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS DeleteGoalById;
CREATE PROCEDURE DeleteGoalById(IN p_id_goal INT)
BEGIN
    DELETE FROM goals
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;

