-- TABLE tbl_courses
DROP TABLE IF EXISTS `tbl_courses`;
CREATE TABLE `tbl_courses` (
  `id_course` int NOT NULL AUTO_INCREMENT,
  `course_title` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `course_subtitle` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `course_description` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `course_status` int DEFAULT NULL,
  `id_user` int DEFAULT NULL,
  `id_level` int DEFAULT NULL,
  `id_category` int DEFAULT NULL,
  `id_price` int DEFAULT NULL,
  PRIMARY KEY (`id_course`),
  KEY `id_level` (`id_level`),
  KEY `id_user` (`id_user`),
  KEY `id_category` (`id_category`),
  KEY `id_price` (`id_price`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

BEGIN;
COMMIT;

-- PROCEDURE tbl_courses
-- InsertCourse
DELIMITER //
DROP PROCEDURE IF EXISTS InsertCourse;
CREATE PROCEDURE InsertCourse(
    IN p_course_title VARCHAR(45),
    IN p_course_subtitle VARCHAR(45),
    IN p_course_description VARCHAR(45),
    IN p_course_status INT,
    IN p_id_user INT,
    IN p_id_level INT,
    IN p_id_category INT,
    IN p_id_price INT
)
BEGIN
    INSERT INTO tbl_courses (course_title, course_subtitle, course_description, course_status, id_user, id_level, id_category, id_price)
    VALUES (p_course_title, p_course_subtitle, p_course_description, p_course_status, p_id_user, p_id_level, p_id_category, p_id_price);
END //
DELIMITER ;

-- UpdateCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS UpdateCourseById;
CREATE PROCEDURE UpdateCourseById(
    IN p_id_course INT,
    IN p_course_title VARCHAR(45),
    IN p_course_subtitle VARCHAR(45),
    IN p_course_description VARCHAR(45),
    IN p_course_status INT,
    IN p_id_user INT,
    IN p_id_level INT,
    IN p_id_category INT,
    IN p_id_price INT
)
BEGIN
    UPDATE tbl_courses
    SET course_title = p_course_title,
        course_subtitle = p_course_subtitle,
        course_description = p_course_description,
        course_status = p_course_status,
        id_user = p_id_user,
        id_level = p_id_level,
        id_category = p_id_category,
        id_price = p_id_price
    WHERE id_course = p_id_course;
END //
DELIMITER ;

-- GetAllCourses
DELIMITER //
DROP PROCEDURE IF EXISTS GetAllCourses;
CREATE PROCEDURE GetAllCourses()
BEGIN
    SELECT id_course, course_title, course_subtitle, course_description, course_status, id_user, id_level, id_category, id_price
    FROM tbl_courses;
END //
DELIMITER ;

-- GetCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS GetCourseById;
CREATE PROCEDURE GetCourseById(IN p_id_course INT)
BEGIN
    SELECT id_course, course_title, course_subtitle, course_description, course_status, id_user, id_level, id_category, id_price
    FROM tbl_courses
    WHERE id_course = p_id_course;
END //
DELIMITER ;

-- DeleteCourseById
DELIMITER //
DROP PROCEDURE IF EXISTS DeleteCourseById;
CREATE PROCEDURE DeleteCourseById(IN p_id_course INT)
BEGIN
    UPDATE tbl_courses
    SET course_status = 0  -- Considerando 0 como inactivo
    WHERE id_course = p_id_course;
END //
DELIMITER ;


:::::::TABLE DESCRIPTION::::::::
-- Eliminamos la tabla descriptions si existe
DROP TABLE IF EXISTS `Tbl_Descriptions`;

-- Creamos la tabla Tbl_Descriptions
CREATE TABLE `Tbl_Descriptions` (
  `id_description` INT NOT NULL AUTO_INCREMENT,
  `name_description` VARCHAR(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `lesson_id` INT DEFAULT NULL,
  PRIMARY KEY (`id_description`),
  KEY `lkesson_id` (`lesson_id`),
  CONSTRAINT `lkesson_id` FOREIGN KEY (`lesson_id`) REFERENCES `lessons` (`id_lesson`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of Tbl_Descriptions
-- ----------------------------
BEGIN;
COMMIT;

DELIMITER $$
CREATE PROCEDURE InsertDescription(
    IN p_name_description VARCHAR(45),
    IN p_lesson_id INT
)
BEGIN
    INSERT INTO Tbl_Descriptions (name_description, lesson_id)
    VALUES (p_name_description, p_lesson_id);
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE UpdateDescription(
    IN p_id_description INT,
    IN p_name_description VARCHAR(45),
    IN p_lesson_id INT
)
BEGIN
    UPDATE Tbl_Descriptions
    SET name_description = p_name_description,
        lesson_id = p_lesson_id
    WHERE id_description = p_id_description;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE GetAllDescriptions()
BEGIN
    SELECT * FROM Tbl_Descriptions;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE GetDescriptionsByName(
    IN p_name_description VARCHAR(45)
)
BEGIN
    SELECT * FROM Tbl_Descriptions
    WHERE name_description LIKE CONCAT('%', p_name_description, '%');
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE DeleteDescription(
    IN p_id_description INT
)
BEGIN
    UPDATE Tbl_Descriptions
    SET name_description = NULL -- O podrías usar un campo de estado si se necesita
    WHERE id_description = p_id_description;
END $$
DELIMITER ;

-- TABLE tbl_goals
DROP TABLE IF EXISTS `tbl_goals`;
CREATE TABLE `tbl_goals` (
  `id_goal` int NOT NULL AUTO_INCREMENT,
  `goal_name` varchar(34) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `id_course` int NOT NULL,
  PRIMARY KEY (`id_goal`),
  KEY `id_course` (`id_course`),
  CONSTRAINT `tbl_goals_ibfk_1` FOREIGN KEY (`id_course`) REFERENCES `tbl_courses` (`id_course`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
BEGIN;
COMMIT;

-- PROCEDURE tbl_goals
-- InsertGoal
DELIMITER //
DROP PROCEDURE IF EXISTS InsertGoal;
CREATE PROCEDURE InsertGoal(
    IN p_goal_name VARCHAR(34),
    IN p_id_course INT
)
BEGIN
    INSERT INTO tbl_goals (goal_name, id_course)
    VALUES (p_goal_name, p_id_course);
END //
DELIMITER ;

-- UpdateGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS UpdateGoalById;
CREATE PROCEDURE UpdateGoalById(
    IN p_id_goal INT,
    IN p_goal_name VARCHAR(34),
    IN p_id_course INT
)
BEGIN
    UPDATE tbl_goals
    SET goal_name = p_goal_name,
        id_course = p_id_course
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;

-- GetAllGoals
DELIMITER //
DROP PROCEDURE IF EXISTS GetAllGoals;
CREATE PROCEDURE GetAllGoals()
BEGIN
    SELECT id_goal, goal_name, id_course
    FROM tbl_goals;
END //
DELIMITER ;

-- GetGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS GetGoalById;
CREATE PROCEDURE GetGoalById(IN p_id_goal INT)
BEGIN
    SELECT id_goal, goal_name, id_course
    FROM tbl_goals
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;

-- DeleteGoalById
DELIMITER //
DROP PROCEDURE IF EXISTS DeleteGoalById;
CREATE PROCEDURE DeleteGoalById(IN p_id_goal INT)
BEGIN
    DELETE FROM tbl_goals
    WHERE id_goal = p_id_goal;
END //
DELIMITER ;

:::::::::::::::TABLE LESSON:::::::::::::::
-- Eliminamos la tabla lessons si existe
DROP TABLE IF EXISTS `Tbl_Lessons`;

-- Creamos la tabla Tbl_Lessons
CREATE TABLE `Tbl_Lessons` (
  `id_lesson` INT NOT NULL AUTO_INCREMENT,
  `name_lesson` VARCHAR(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `url_lesson` VARCHAR(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `iframe_lesson` VARCHAR(255) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `section_id` INT DEFAULT NULL,
  `platform_id` INT DEFAULT NULL,
  PRIMARY KEY (`id_lesson`),
  KEY `platform_id` (`platform_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of Tbl_Lessons
-- ----------------------------
BEGIN;
COMMIT;


DELIMITER $$
CREATE PROCEDURE InsertLesson(
    IN p_name_lesson VARCHAR(45),
    IN p_url_lesson VARCHAR(45),
    IN p_iframe_lesson VARCHAR(255),
    IN p_section_id INT,
    IN p_platform_id INT
)
BEGIN
    INSERT INTO Tbl_Lessons (name_lesson, url_lesson, iframe_lesson, section_id, platform_id)
    VALUES (p_name_lesson, p_url_lesson, p_iframe_lesson, p_section_id, p_platform_id);
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE UpdateLesson(
    IN p_id_lesson INT,
    IN p_name_lesson VARCHAR(45),
    IN p_url_lesson VARCHAR(45),
    IN p_iframe_lesson VARCHAR(255),
    IN p_section_id INT,
    IN p_platform_id INT
)
BEGIN
    UPDATE Tbl_Lessons
    SET name_lesson = p_name_lesson,
        url_lesson = p_url_lesson,
        iframe_lesson = p_iframe_lesson,
        section_id = p_section_id,
        platform_id = p_platform_id
    WHERE id_lesson = p_id_lesson;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE GetAllLessons()
BEGIN
    SELECT * FROM Tbl_Lessons;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetLessonsByName(
    IN p_name_lesson VARCHAR(45)
)
BEGIN
    SELECT * FROM Tbl_Lessons
    WHERE name_lesson LIKE CONCAT('%', p_name_lesson, '%');
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE DeleteLesson(
    IN p_id_lesson INT
)
BEGIN
    UPDATE Tbl_Lessons
    SET name_lesson = NULL -- O podrías usar un campo de estado si se necesita
    WHERE id_lesson = p_id_lesson;
END $$
DELIMITER ;

:::::::::::::::::::::::::::::::::::::::::: JAVIER - ABNER :::::::::::::::::::::::::::::::::
-- Eliminamos la tabla users si existe
DROP TABLE IF EXISTS `users`;

-- Creamos la tabla users
CREATE TABLE `tbl_users` (
  `id_user` int NOT NULL AUTO_INCREMENT,
  `name_user` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `email_user` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `password_user` varchar(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  PRIMARY KEY (`id_user`),
  KEY `user_id` (`id_user`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
ALTER TABLE `tbl_users` ADD COLUMN `active` BOOLEAN DEFAULT TRUE;

-------------------
BEGIN;
COMMIT;


-- insertUser

DELIMITER //
CREATE PROCEDURE InsertUser(
    IN p_name_user VARCHAR(45),
    IN p_email_user VARCHAR(45),
    IN p_password_user VARCHAR(45)
)
BEGIN
    INSERT INTO tbl_users (name_user, email_user, password_user, active)
    VALUES (p_name_user, p_email_user, p_password_user, TRUE);
END //
DELIMITER ;


-- update user 
DELIMITER //

CREATE PROCEDURE UpdateUserByName(
    IN p_name VARCHAR(45),
    IN p_email VARCHAR(45),
    IN p_password VARCHAR(45),
    IN p_active BOOLEAN
)
BEGIN
    UPDATE tbl_users
    SET email_user = p_email,
        password_user = p_password,
        active = p_active
    WHERE name_user = p_name;
END //

DELIMITER ;



-- GetAllUser 
DELIMITER //
CREATE PROCEDURE GetAllUsers()
BEGIN
    SELECT name_user, email_user
    FROM tbl_users
    WHERE active = TRUE;
END //
DELIMITER ;


-- Get User By Name

DELIMITER //
CREATE PROCEDURE GetUserByName(IN p_name VARCHAR(45))
BEGIN
    SELECT name_user, email_user
    FROM tbl_users
    WHERE name_user LIKE CONCAT('%', p_name, '%') AND active = TRUE;
END //
DELIMITER ;


-- Delete Logic 
DELIMITER //

CREATE PROCEDURE DeleteUserByName(IN p_name VARCHAR(45))
BEGIN
    UPDATE tbl_users
    SET active = FALSE
    WHERE name_user = p_name;
END //

DELIMITER ;



DROP TABLE IF EXISTS course_user;
CREATE TABLE course_user (
  user_id int NOT NULL,
  course_id int NOT NULL,
  PRIMARY KEY (user_id,course_id),
  KEY course_id (course_id),
  CONSTRAINT course_user_ibfk_1 FOREIGN KEY (user_id) REFERENCES tbl_users (id_user),
  CONSTRAINT course_user_ibfk_2 FOREIGN KEY (course_id) REFERENCES courses (id_course)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of course_user
-- ----------------------------
BEGIN;
COMMIT;



-- :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
-- Eliminamos la tabla courses si existe
DROP TABLE IF EXISTS `courses`;

-- Creamos la tabla courses
CREATE TABLE `courses` (
  `id_course` INT NOT NULL AUTO_INCREMENT,
  `course_name` VARCHAR(100) NOT NULL, -- Nombre del curso
  `description` TEXT COLLATE utf8mb4_general_ci, -- Descripción del curso
  `status` TINYINT(1) DEFAULT 1, -- Estado del curso: 1 (activo), 0 (inactivo)
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Fecha de creación del curso
  PRIMARY KEY (`id_course`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


-- Table structure for comments
-- Tabla comments (polimorfica)
-- ----------------------------
DROP TABLE IF EXISTS `tbl_comments`;

CREATE TABLE `tbl_comments` (
  `id_comment` INT NOT NULL AUTO_INCREMENT,
  `content` TEXT COLLATE utf8mb4_general_ci NOT NULL, -- Texto del comentario
  `commentable_id` INT NOT NULL,
  `commentable_type` VARCHAR(45) COLLATE utf8mb4_general_ci NOT NULL,
  `id_user` INT DEFAULT NULL,
  `status` TINYINT(1) DEFAULT 1, -- Estado del comentario: 1 (activo), 0 (inactivo)
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Fecha de creación del comentario
  PRIMARY KEY (`id_comment`),
  KEY `id_user` (`id_user`),
  KEY `commentable` (`commentable_id`, `commentable_type`), -- Índice combinado para mejorar el rendimiento
  CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `tbl_users` (`id_user`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


-- ----------------------------
-- Records of comments
-- ----------------------------
BEGIN;
COMMIT;

--::::::::::::::::::::::::::::::

-- PROCEDURE tbl_comments
-- PROCEDURE TABLE tbl_comments

-- Procedimiento almacenado para insertar un nuevo comentario
DELIMITER //
CREATE PROCEDURE InsertComment(
    IN commentable_id INT,
    IN commentable_type VARCHAR(45),
    IN id_user INT,
    IN content TEXT
)
BEGIN
    INSERT INTO comments (commentable_id, commentable_type, id_user, content, created_at, estado)
    VALUES (commentable_id, commentable_type, id_user, content, NOW(), 1);
END //
DELIMITER ;

-- Procedimiento almacenado para actualizar un comentario existente
DELIMITER //
CREATE PROCEDURE UpdateComment(
    IN id_comment INT,
    IN content TEXT,
    IN estado TINYINT
)
BEGIN
    UPDATE comments
    SET content = content,
        estado = estado
    WHERE id_comment = id_comment;
END //
DELIMITER ;

-- Procedimiento almacenado para obtener todos los comentarios
DELIMITER //
CREATE PROCEDURE GetAllComments()
BEGIN
    SELECT * FROM comments;
END //
DELIMITER ;

-- Procedimiento almacenado para buscar comentarios por el contenido
DELIMITER //
CREATE PROCEDURE GetCommentsByContent(
    IN content VARCHAR(255)
)
BEGIN
    SELECT * FROM comments
    WHERE content LIKE CONCAT('%', content, '%');
END //
DELIMITER ;

-- Procedimiento almacenado para eliminar un comentario de forma lógica
DELIMITER //
CREATE PROCEDURE DeleteComment(
    IN id_comment INT
)
BEGIN
    UPDATE comments
    SET estado = 0  -- Cambiamos el estado a inactivo
    WHERE id_comment = id_comment;
END //
DELIMITER ;


-- ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

-- ----------------------------
-- Table structure for REVIEWS
-- ----------------------------
DROP TABLE IF EXISTS `reviews`;

CREATE TABLE `tbl_reviews` (
  `id_review` INT NOT NULL AUTO_INCREMENT,
  `comment_review` TEXT COLLATE utf8mb4_general_ci NOT NULL,  -- Texto de la reseña
  `rating_review` INT NOT NULL,  -- Valor numérico para la calificación
  `id_user` INT DEFAULT NULL,
  `course_id` INT DEFAULT NULL,
  `status` TINYINT(1) DEFAULT 1,  -- Estado de la reseña: 1 (activa), 0 (inactiva)
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Fecha de creación
  PRIMARY KEY (`id_review`),
  KEY `id_user` (`id_user`),
  KEY `course_id` (`course_id`),
  CONSTRAINT `reviews_ibfk_1` FOREIGN KEY (`id_user`) REFERENCES `tbl_users` (`id_user`),
  CONSTRAINT `reviews_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id_course`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- :::::::::::::::::::::::

-- PROCEDURE tbl_comments
-- PROCEDURE TABLE tbl_comments

-- Procedimiento para insertar una nueva reseña
DELIMITER $$
CREATE PROCEDURE InsertReview(
    IN comment_review TEXT,
    IN rating_review INT,
    IN id_user INT,
    IN course_id INT
)
BEGIN
    INSERT INTO reviews (comment_review, rating_review, id_user, course_id)
    VALUES (comment_review, rating_review, id_user, course_id);
END $$
DELIMITER ;

-- Procedimiento para actualizar una reseña existente
DELIMITER $$
CREATE PROCEDURE UpdateReview(
    IN id_review INT,
    IN comment_review TEXT,
    IN rating_review INT,
    IN estado TINYINT
)
BEGIN
    UPDATE reviews
    SET comment_review = comment_review,
        rating_review = rating_review,
        estado = estado
    WHERE id_review = id_review;
END $$
DELIMITER ;

-- Procedimiento para obtener todas las reseñas
DELIMITER $$
CREATE PROCEDURE GetAllReviews()
BEGIN
    SELECT * FROM reviews;
END $$
DELIMITER ;

-- Procedimiento para buscar reseñas por comentario
DELIMITER $$
CREATE PROCEDURE GetReviewsByComment(
    IN comment VARCHAR(255)
)
BEGIN
    SELECT * FROM reviews
    WHERE comment_review LIKE CONCAT('%', comment, '%');
END $$
DELIMITER ;

-- Procedimiento para eliminar una reseña (de forma lógica)
DELIMITER $$
CREATE PROCEDURE DeleteReview(
    IN id_review INT
)
BEGIN
    UPDATE reviews
    SET estado = 0 -- Cambiar el estado a inactivo
    WHERE id_review = id_review;
END $$
DELIMITER ;


:::::::::::::::::::::TABLA DE REQUIREMENTS ::::::::::::::::::::::

USE db_umg;

-- Eliminamos la tabla tbl_requirements si existe
DROP TABLE IF EXISTS `tbl_requirements`;

-- Creamos la tabla tbl_requirements
CREATE TABLE `tbl_requirements` (
  `id_requirement` INT NOT NULL AUTO_INCREMENT,
  `name_requirement` VARCHAR(45) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `course_id` INT NOT NULL,
  PRIMARY KEY (`id_requirement`),
  KEY `course_id` (`course_id`),
  CONSTRAINT `requirements_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `tbl_courses` (`id_course`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of tbl_requirements
-- ----------------------------
BEGIN;
COMMIT;

::::::::::::::::::::PROCEDIMIENTOS ALMACENADOS ::::::::::::::::::::::::::
::::::::InsertRequirement::::::::::::::::::::::::
DELIMITER $$
CREATE PROCEDURE InsertRequirement(
    IN p_name_requirement VARCHAR(45),
    IN p_course_id INT
)
BEGIN
    INSERT INTO tbl_requirements (name_requirement, course_id)
    VALUES (p_name_requirement, p_course_id);
END $$
DELIMITER ;

:::::::::UpdateRequirement::::::::::::::::::
DELIMITER $$
CREATE PROCEDURE UpdateRequirement(
    IN p_id_requirement INT,
    IN p_name_requirement VARCHAR(45),
    IN p_course_id INT
)
BEGIN
    UPDATE tbl_requirements
    SET name_requirement = p_name_requirement,
        course_id = p_course_id
    WHERE id_requirement = p_id_requirement;
END $$
DELIMITER ;

::::::::::GetAllRequirements:::::::::::::::::
DELIMITER $$
CREATE PROCEDURE GetAllRequirements()
BEGIN
    SELECT * FROM tbl_requirements;
END $$
DELIMITER ;

::::::::::GetRequirementsByName:::::::::::::::
DELIMITER $$
CREATE PROCEDURE GetRequirementsByName(
    IN p_name_requirement VARCHAR(45)
)
BEGIN
    SELECT * FROM tbl_requirements
    WHERE name_requirement LIKE CONCAT('%', p_name_requirement, '%');
END $$
DELIMITER ;

::::::::::DeleteRequirement::::::::::::::::
DELIMITER $$
CREATE PROCEDURE DeleteRequirement(
    IN p_id_requirement INT
)
BEGIN
    UPDATE tbl_requirements
    SET active = FALSE
    WHERE id_requirement = p_id_requirement;
END $$
DELIMITER ;
:::::::::::::::::::::::::::::::::::::::::::

::::::::::::::::::::::::TABLA DE PRICES :::::::::::::::::::::::::::::::::

-- Eliminamos la tabla prices si existe
DROP TABLE IF EXISTS `Tbl_Prices`;

-- Creamos la tabla Tbl_Prices
CREATE TABLE `Tbl_Prices` (
  `id_price` INT NOT NULL AUTO_INCREMENT,
  `amount_price` DECIMAL(10,2) DEFAULT NULL,
  `status` TINYINT(1) DEFAULT 1, -- Estado del precio: 1 (activo), 0 (inactivo)
  PRIMARY KEY (`id_price`),
  CONSTRAINT `price_id` FOREIGN KEY (`id_price`) REFERENCES `courses` (`id_course`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:::::::::InsertPrice::::::::::::::::

DELIMITER $$
CREATE PROCEDURE InsertPrice(
    IN p_amount_price DECIMAL(10,2)
)
BEGIN
    INSERT INTO Tbl_Prices (amount_price, status)
    VALUES (p_amount_price, 1);
END $$
DELIMITER ;

::::::::::UpdatePrice::::::::::::::
DELIMITER $$
CREATE PROCEDURE UpdatePrice(
    IN p_id_price INT,
    IN p_amount_price DECIMAL(10,2),
    IN p_status TINYINT
)
BEGIN
    UPDATE Tbl_Prices
    SET amount_price = p_amount_price,
        status = p_status
    WHERE id_price = p_id_price;
END $$
DELIMITER ;

::::::::::GetAllPrices::::::::::::::
DELIMITER $$
CREATE PROCEDURE GetAllPrices()
BEGIN
    SELECT * FROM Tbl_Prices
    WHERE status = 1;
END $$
DELIMITER ;
::::::::::::::::::::::::::::::::::::

:::::::GetPricesByAmount::::::::::::
DELIMITER $$
CREATE PROCEDURE GetPricesByAmount(
    IN p_amount DECIMAL(10,2)
)
BEGIN
    SELECT * FROM Tbl_Prices
    WHERE amount_price = p_amount AND status = 1;
END $$
DELIMITER ;
:::::::::::::::::::::::::::::::::::

:::::::::DeletePrices::::::::::::::
DELIMITER $$
CREATE PROCEDURE DeletePrice(
    IN p_id_price INT
)
BEGIN
    UPDATE Tbl_Prices
    SET status = 0 -- Cambiamos el estado a inactivo
    WHERE id_price = p_id_price;
END $$
DELIMITER ;
:::::::::::::::::::::::::::::::::::

:::::::::Ejemplos de insersion de datos::::::::::::::
-- Insertamos un precio de ejemplo
CALL InsertPrice(150.00);

-- Actualizamos un precio existente (ejemplo con id 1)
CALL UpdatePrice(1, 175.00, 1);

-- Obtenemos todos los precios activos
CALL GetAllPrices();

-- Buscamos precios por monto específico (ejemplo 150.00)
CALL GetPricesByAmount(150.00);

-- Eliminamos un precio de forma lógica (ejemplo con id 1)
CALL DeletePrice(1);

:::::::::::::::::::::::::::::::::::::::::::::::::::::

aqui comienza el otro
