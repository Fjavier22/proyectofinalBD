----------------------------------------------------------
-- Procedimientos almacenados para la tabla tbl_images----
----------------------------------------------------------

-- Procedimiento para insertar una nueva imagen
DELIMITER //
CREATE PROCEDURE InsertImage(
    IN p_url_image VARCHAR(255),
    IN p_imageable_id INT,
    IN p_imageable_type VARCHAR(45)
)
BEGIN
    INSERT INTO tbl_images (url_image, imageable_id, imageable_type, status, created_at)
    VALUES (p_url_image, p_imageable_id, UPPER(p_imageable_type), 1, NOW());
END //
DELIMITER ;

-- Procedimiento para actualizar una imagen existente
DELIMITER //
CREATE PROCEDURE UpdateImage(
    IN p_id_image INT,
    IN p_url_image VARCHAR(255),
    IN p_imageable_id INT,
    IN p_imageable_type VARCHAR(45),
    IN p_status TINYINT
)
BEGIN
    UPDATE tbl_images
    SET url_image = p_url_image,
        imageable_id = p_imageable_id,
        imageable_type = UPPER(p_imageable_type),
        status = p_status
    WHERE id_image = p_id_image;
END //
DELIMITER ;

-- Procedimiento para obtener todas las im치genes activas
DELIMITER //
CREATE PROCEDURE GetAllActiveImages()
BEGIN
    SELECT * FROM tbl_images
    WHERE status = 1;
END //
DELIMITER ;

-- Procedimiento para buscar im치genes por tipo de contenido
DELIMITER //
CREATE PROCEDURE GetImagesByType(
    IN p_imageable_type VARCHAR(45)
)
BEGIN
    SELECT * FROM tbl_images
    WHERE imageable_type = UPPER(p_imageable_type) AND status = 1;
END //
DELIMITER ;

-- Procedimiento para eliminar una imagen de forma l칩gica
DELIMITER //
CREATE PROCEDURE DeleteImage(
    IN p_id_image INT
)
BEGIN
    UPDATE tbl_images
    SET status = 0 -- Cambiar el estado a inactivo
    WHERE id_image = p_id_image;
END //
DELIMITER ;
---------------------------------------------------------
-- Procedimientos almacenados para la tabla tbl_likes----
---------------------------------------------------------

-- Procedimiento para insertar un nuevo like
DELIMITER //
CREATE PROCEDURE InsertLike(
    IN p_value TINYINT,
    IN p_likeable_id INT,
    IN p_likeable_type VARCHAR(45),
    IN p_user_id INT
)
BEGIN
    INSERT INTO tbl_likes (value, likeable_id, likeable_type, user_id, status, created_at)
    VALUES (p_value, p_likeable_id, UPPER(p_likeable_type), p_user_id, 1, NOW());
END //
DELIMITER ;

-- Procedimiento para actualizar un like existente
DELIMITER //
CREATE PROCEDURE UpdateLike(
    IN p_id_like INT,
    IN p_value TINYINT,
    IN p_status TINYINT
)
BEGIN
    UPDATE tbl_likes
    SET value = p_value,
        status = p_status
    WHERE id_like = p_id_like;
END //
DELIMITER ;

-- Procedimiento para obtener todos los likes activos
DELIMITER //
CREATE PROCEDURE GetAllActiveLikes()
BEGIN
    SELECT * FROM tbl_likes
    WHERE status = 1;
END //
DELIMITER ;

-- Procedimiento para buscar likes por tipo de contenido
DELIMITER //
CREATE PROCEDURE GetLikesByType(
    IN p_likeable_type VARCHAR(45)
)
BEGIN
    SELECT * FROM tbl_likes
    WHERE likeable_type = UPPER(p_likeable_type) AND status = 1;
END //
DELIMITER ;

-- Procedimiento para eliminar un like de forma l칩gica
DELIMITER //
CREATE PROCEDURE DeleteLike(
    IN p_id_like INT
)
BEGIN
    UPDATE tbl_likes
    SET status = 0 -- Cambiar el estado a inactivo
    WHERE id_like = p_id_like;
END //
DELIMITER ;




----------------------------------------------------------
-- Procedimientos almacenados para la tabla tbl_platfomrs----
----------------------------------------------------------
-- Insert Platform
DELIMITER //
CREATE PROCEDURE InsertPlatform(
    IN p_name_platform VARCHAR(100)
)
BEGIN
    INSERT INTO tbl_platforms (name_platform) VALUES (p_name_platform);
END //
DELIMITER ;

-- Update Platform by ID
DELIMITER //
CREATE PROCEDURE UpdatePlatformById(
    IN p_id_platform INT,
    IN p_name_platform VARCHAR(100),
    IN p_status TINYINT(1)
)
BEGIN
    UPDATE tbl_platforms
    SET name_platform = p_name_platform, status = p_status
    WHERE id_platform = p_id_platform;
END //
DELIMITER ;

-- Get All Platforms
DELIMITER //
CREATE PROCEDURE GetAllPlatforms()
BEGIN
    SELECT * FROM tbl_platforms WHERE status = 1;
END //
DELIMITER ;

-- Get Platform by ID
DELIMITER //
CREATE PROCEDURE GetPlatformById(IN p_id_platform INT)
BEGIN
    SELECT * FROM tbl_platforms WHERE id_platform = p_id_platform AND status = 1;
END //
DELIMITER ;

-- Delete Logic (Soft Delete) by ID
DELIMITER //
CREATE PROCEDURE DeletePlatformById(IN p_id_platform INT)
BEGIN
    UPDATE tbl_platforms
    SET status = 0
    WHERE id_platform = p_id_platform;
END //
DELIMITER ;











----------------------------------------------------------
-- Procedimientos almacenados para la tabla tbl_lesson_user----
----------------------------------------------------------



-- Insert Lesson_User
DELIMITER //
CREATE PROCEDURE InsertLessonUser(
    IN p_id_user INT,
    IN p_id_lesson INT
)
BEGIN
    INSERT INTO tbl_lesson_user (id_user, id_lesson) VALUES (p_id_user, p_id_lesson);
END //
DELIMITER ;

-- Update Lesson_User by ID
DELIMITER //
CREATE PROCEDURE UpdateLessonUserById(
    IN p_id_lesson_user INT,
    IN p_id_user INT,
    IN p_id_lesson INT
)
BEGIN
    UPDATE tbl_lesson_user
    SET id_user = p_id_user, id_lesson = p_id_lesson
    WHERE id_lesson_user = p_id_lesson_user;
END //
DELIMITER ;

-- Get All Lesson_Users
DELIMITER //
CREATE PROCEDURE GetAllLessonUsers()
BEGIN
    SELECT * FROM tbl_lesson_user;
END //
DELIMITER ;

-- Get Lesson_User by ID
DELIMITER //
CREATE PROCEDURE GetLessonUserById(IN p_id_lesson_user INT)
BEGIN
    SELECT * FROM tbl_lesson_user WHERE id_lesson_user = p_id_lesson_user;
END //
DELIMITER ;

-- Delete Lesson_User by ID
DELIMITER //
CREATE PROCEDURE DeleteLessonUserById(IN p_id_lesson_user INT)
BEGIN
    DELETE FROM tbl_lesson_user WHERE id_lesson_user = p_id_lesson_user;
END //
DELIMITER ;
